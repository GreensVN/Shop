// devtools-protection.js - Fixed DevTools Protection System
"use strict";

/**
 * DevTools Protection System - Ch·ªâ cho ph√©p Admin s·ª≠ d·ª•ng DevTools
 */
class DevToolsProtection {
    constructor() {
        this.isDevToolsOpen = false;
        this.checkInterval = null;
        this.protectedPages = ['account.html', 'index.html', 'product.html'];
        this.warningCount = 0;
        this.maxWarnings = 3;
        this.isBlocked = false;
        this.threshold = 160; // DevTools detection threshold
        
        console.log('üõ°Ô∏è DevTools Protection constructor called');
        this.init();
    }

    /**
     * Kh·ªüi t·∫°o h·ªá th·ªëng b·∫£o v·ªá
     */
    init() {
        console.log('üõ°Ô∏è DevTools Protection init started');
        
        // Ch·ªâ kh·ªüi ƒë·ªông b·∫£o v·ªá tr√™n c√°c trang ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
        if (this.shouldProtect()) {
            console.log('‚úÖ Protection activated for this page');
            this.startProtection();
            this.addAntiDebugMethods();
            this.blockCommonShortcuts();
            this.addVisibilityChangeHandler();
        } else {
            console.log('‚ÑπÔ∏è No protection needed for this page');
        }
    }

    /**
     * Ki·ªÉm tra xem trang hi·ªán t·∫°i c√≥ c·∫ßn b·∫£o v·ªá kh√¥ng
     */
    shouldProtect() {
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';
        const needsProtection = this.protectedPages.some(page => 
            currentPage.includes(page.replace('.html', ''))
        ) || currentPage === '' || currentPage === 'index.html';
        
        console.log('üìÑ Current page:', currentPage, '| Needs protection:', needsProtection);
        return needsProtection;
    }

    /**
     * Ki·ªÉm tra quy·ªÅn admin
     */
    isAdmin() {
        try {
            // Ki·ªÉm tra t·ª´ window.currentUser tr∆∞·ªõc
            if (window.currentUser) {
                const isAdminUser = window.currentUser.role === 'admin';
                console.log('üë§ Admin check (window.currentUser):', isAdminUser);
                return isAdminUser;
            }
            
            // Fallback: ki·ªÉm tra t·ª´ localStorage
            const user = JSON.parse(localStorage.getItem('gag_user') || '{}');
            const isAdminUser = user && user.role === 'admin';
            console.log('üë§ Admin check (localStorage):', isAdminUser, '| User role:', user?.role);
            return isAdminUser;
        } catch (error) {
            console.error('‚ùå Error checking admin status:', error);
            return false;
        }
    }

    /**
     * B·∫Øt ƒë·∫ßu h·ªá th·ªëng b·∫£o v·ªá
     */
    startProtection() {
        console.log('üöÄ Starting protection systems...');
        
        // Ki·ªÉm tra li√™n t·ª•c DevTools
        this.checkInterval = setInterval(() => {
            this.detectDevTools();
        }, 500);

        console.log('‚úÖ DevTools detection interval started');
    }

    /**
     * Ph√°t hi·ªán DevTools
     */
    detectDevTools() {
        if (this.isAdmin()) {
            // Admin ƒë∆∞·ª£c ph√©p - kh√¥ng l√†m g√¨ c·∫£
            return;
        }

        // Ph∆∞∆°ng ph√°p 1: Ki·ªÉm tra k√≠ch th∆∞·ªõc window
        const widthDiff = window.outerWidth - window.innerWidth;
        const heightDiff = window.outerHeight - window.innerHeight;
        
        if (widthDiff > this.threshold || heightDiff > this.threshold) {
            if (!this.isDevToolsOpen) {
                this.isDevToolsOpen = true;
                this.handleDevToolsDetected();
            }
        } else {
            this.isDevToolsOpen = false;
        }

        // Ph∆∞∆°ng ph√°p 2: Ki·ªÉm tra console timing
        this.checkConsoleDebugging();
    }

    /**
     * Ki·ªÉm tra console debugging
     */
    checkConsoleDebugging() {
        if (this.isAdmin()) return;

        // Ki·ªÉm tra timing ƒë·ªÉ ph√°t hi·ªán DevTools
        const start = performance.now();
        console.log(''); // Dummy log
        const end = performance.now();
        
        // N·∫øu console.log ch·∫≠m h∆°n b√¨nh th∆∞·ªùng -> DevTools ƒëang m·ªü
        if (end - start > 1) {
            this.handleDevToolsDetected();
        }
    }

    /**
     * X·ª≠ l√Ω khi ph√°t hi·ªán DevTools
     */
    handleDevToolsDetected() {
        if (this.isAdmin()) {
            console.log('üëë Admin detected - DevTools allowed');
            return;
        }

        this.warningCount++;
        
        console.clear();
        console.log('%cüö´ C·∫¢NH B√ÅO B·∫¢O M·∫¨T', 'color: red; font-size: 20px; font-weight: bold;');
        console.log('%cVi·ªác m·ªü Developer Tools kh√¥ng ƒë∆∞·ª£c ph√©p!', 'color: red; font-size: 14px;');
        console.log(`%cC·∫£nh b√°o ${this.warningCount}/${this.maxWarnings}`, 'color: orange; font-size: 12px;');

        // Hi·ªÉn th·ªã modal c·∫£nh b√°o
        this.showWarningModal();

        if (this.warningCount >= this.maxWarnings) {
            this.blockAccess();
        }
    }

    /**
     * Hi·ªÉn th·ªã modal c·∫£nh b√°o
     */
    showWarningModal() {
        if (this.isAdmin()) return;

        // X√≥a modal c≈© n·∫øu c√≥
        const existingModal = document.getElementById('devtools-warning-modal');
        if (existingModal) existingModal.remove();

        const modal = document.createElement('div');
        modal.id = 'devtools-warning-modal';
        modal.innerHTML = `
            <div style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.9);
                z-index: 99999;
                display: flex;
                align-items: center;
                justify-content: center;
                font-family: Arial, sans-serif;
            ">
                <div style="
                    background: white;
                    padding: 30px;
                    border-radius: 10px;
                    text-align: center;
                    max-width: 400px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.5);
                ">
                    <div style="color: #e74c3c; font-size: 48px; margin-bottom: 20px;">‚ö†Ô∏è</div>
                    <h2 style="color: #e74c3c; margin-bottom: 15px;">C·∫¢NH B√ÅO B·∫¢O M·∫¨T</h2>
                    <p style="color: #333; margin-bottom: 20px; line-height: 1.5;">
                        Vi·ªác m·ªü Developer Tools kh√¥ng ƒë∆∞·ª£c ph√©p tr√™n trang n√†y.<br>
                        <strong>C·∫£nh b√°o: ${this.warningCount}/${this.maxWarnings}</strong>
                    </p>
                    <button id="close-warning" style="
                        background: #e74c3c;
                        color: white;
                        border: none;
                        padding: 10px 20px;
                        border-radius: 5px;
                        cursor: pointer;
                        font-size: 16px;
                    ">ƒê√£ hi·ªÉu</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // T·ª± ƒë·ªông ƒë√≥ng sau 3 gi√¢y
        setTimeout(() => {
            if (modal && modal.parentNode) modal.remove();
        }, 3000);

        // ƒê√≥ng khi click n√∫t
        const closeBtn = modal.querySelector('#close-warning');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                if (modal && modal.parentNode) modal.remove();
            });
        }
    }

    /**
     * Ch·∫∑n ho√†n to√†n truy c·∫≠p
     */
    blockAccess() {
        if (this.isAdmin()) return;

        this.isBlocked = true;
        
        console.log('üö´ Blocking access due to repeated violations');
        
        // Clear t·∫•t c·∫£ intervals
        if (this.checkInterval) {
            clearInterval(this.checkInterval);
            this.checkInterval = null;
        }

        // Block to√†n b·ªô trang
        document.body.innerHTML = `
            <div style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                z-index: 999999;
                display: flex;
                align-items: center;
                justify-content: center;
                font-family: Arial, sans-serif;
                color: white;
            ">
                <div style="text-align: center;">
                    <div style="font-size: 72px; margin-bottom: 30px;">üö´</div>
                    <h1 style="font-size: 2.5rem; margin-bottom: 20px;">TRUY C·∫¨P B·ªä CH·∫∂N</h1>
                    <p style="font-size: 1.2rem; margin-bottom: 30px; opacity: 0.9;">
                        B·∫°n ƒë√£ vi ph·∫°m ch√≠nh s√°ch b·∫£o m·∫≠t c·ªßa website
                    </p>
                    <p style="opacity: 0.7;">ƒêang chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß...</p>
                </div>
            </div>
        `;

        // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß sau 2 gi√¢y
        setTimeout(() => {
            window.location.href = 'index.html';
        }, 2000);
    }

    /**
     * Ch·∫∑n c√°c ph√≠m t·∫Øt ph·ªï bi·∫øn
     */
    blockCommonShortcuts() {
        console.log('‚å®Ô∏è Blocking common shortcuts...');
        
        // NgƒÉn ph√≠m t·∫Øt
        document.addEventListener('keydown', (e) => this.handleKeyDown(e), { passive: false, capture: true });
        
        // NgƒÉn chu·ªôt ph·∫£i
        document.addEventListener('contextmenu', (e) => this.handleContextMenu(e), { passive: false, capture: true });
        
        // NgƒÉn select text
        document.addEventListener('selectstart', (e) => this.handleSelectStart(e), { passive: false, capture: true });
        
        console.log('‚úÖ Shortcut blocking activated');
    }

    /**
     * X·ª≠ l√Ω ph√≠m t·∫Øt
     */
    handleKeyDown(e) {
        if (this.isAdmin()) return;

        let blocked = false;
        let message = '';

        // F12
        if (e.keyCode === 123) {
            blocked = true;
            message = 'F12 kh√¥ng ƒë∆∞·ª£c ph√©p!';
        }
        // Ctrl+Shift+I (Dev Tools)
        else if (e.ctrlKey && e.shiftKey && e.keyCode === 73) {
            blocked = true;
            message = 'Ctrl+Shift+I kh√¥ng ƒë∆∞·ª£c ph√©p!';
        }
        // Ctrl+U (View Source)
        else if (e.ctrlKey && e.keyCode === 85) {
            blocked = true;
            message = 'Ctrl+U kh√¥ng ƒë∆∞·ª£c ph√©p!';
        }
        // Ctrl+S (Save)
        else if (e.ctrlKey && e.keyCode === 83) {
            blocked = true;
            message = 'Ctrl+S kh√¥ng ƒë∆∞·ª£c ph√©p!';
        }
        // Ctrl+A (Select All)
        else if (e.ctrlKey && e.keyCode === 65) {
            blocked = true;
            message = 'Ctrl+A kh√¥ng ƒë∆∞·ª£c ph√©p!';
        }
        // Ctrl+P (Print)
        else if (e.ctrlKey && e.keyCode === 80) {
            blocked = true;
            message = 'Ctrl+P kh√¥ng ƒë∆∞·ª£c ph√©p!';
        }
        // Ctrl+Shift+C (Inspect Element)
        else if (e.ctrlKey && e.shiftKey && e.keyCode === 67) {
            blocked = true;
            message = 'Ctrl+Shift+C kh√¥ng ƒë∆∞·ª£c ph√©p!';
        }

        if (blocked) {
            e.preventDefault();
            e.stopPropagation();
            this.showQuickWarning(message);
            return false;
        }
    }

    /**
     * X·ª≠ l√Ω chu·ªôt ph·∫£i
     */
    handleContextMenu(e) {
        if (this.isAdmin()) return;

        e.preventDefault();
        e.stopPropagation();
        this.showQuickWarning('Chu·ªôt ph·∫£i kh√¥ng ƒë∆∞·ª£c ph√©p!');
        return false;
    }

    /**
     * X·ª≠ l√Ω select text
     */
    handleSelectStart(e) {
        if (this.isAdmin()) return;

        // Cho ph√©p select trong input v√† textarea
        if (['INPUT', 'TEXTAREA'].includes(e.target.tagName)) {
            return;
        }

        e.preventDefault();
        e.stopPropagation();
        return false;
    }

    /**
     * Hi·ªÉn th·ªã c·∫£nh b√°o nhanh
     */
    showQuickWarning(message) {
        // X√≥a warning c≈© n·∫øu c√≥
        const existingWarning = document.getElementById('quick-warning');
        if (existingWarning) existingWarning.remove();

        // T·∫°o th√¥ng b√°o nhanh
        const warning = document.createElement('div');
        warning.id = 'quick-warning';
        warning.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #e74c3c;
            color: white;
            padding: 15px 20px;
            border-radius: 5px;
            z-index: 99999;
            font-family: Arial, sans-serif;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            animation: slideInWarning 0.3s ease;
            pointer-events: none;
        `;
        warning.textContent = message;

        // Th√™m animation CSS n·∫øu ch∆∞a c√≥
        if (!document.getElementById('warning-animation-style')) {
            const style = document.createElement('style');
            style.id = 'warning-animation-style';
            style.textContent = `
                @keyframes slideInWarning {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
            `;
            document.head.appendChild(style);
        }

        document.body.appendChild(warning);

        // T·ª± ƒë·ªông x√≥a sau 2 gi√¢y
        setTimeout(() => {
            if (warning && warning.parentNode) {
                warning.remove();
            }
        }, 2000);
    }

    /**
     * Th√™m c√°c ph∆∞∆°ng ph√°p ch·ªëng debug
     */
    addAntiDebugMethods() {
        if (this.isAdmin()) return;

        console.log('üîí Adding anti-debug methods...');

        // L√†m r·ªëi console
        setInterval(() => {
            if (this.isAdmin()) return;
            
            console.clear();
            console.log('%cSTOP!', 'color: red; font-size: 50px; font-weight: bold;');
            console.log('%cƒê√¢y l√† t√≠nh nƒÉng d√†nh cho Developer. N·∫øu b·∫°n kh√¥ng ph·∫£i admin, vi·ªác s·ª≠ d·ª•ng c√≥ th·ªÉ vi ph·∫°m b·∫£o m·∫≠t.', 'color: red; font-size: 16px;');
        }, 2000);

        // NgƒÉn debug (but don't overuse to avoid performance issues)
        let debugCounter = 0;
        const debugInterval = setInterval(() => {
            if (this.isAdmin()) {
                clearInterval(debugInterval);
                return;
            }
            
            if (debugCounter < 10) { // Only run 10 times to avoid blocking page
                debugger;
                debugCounter++;
            } else {
                clearInterval(debugInterval);
            }
        }, 1000);
    }

    /**
     * Th√™m handler cho visibility change
     */
    addVisibilityChangeHandler() {
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && this.isBlocked) {
                // N·∫øu user quay l·∫°i tab sau khi b·ªã block
                console.log('üö´ User returned to blocked tab - redirecting...');
                window.location.href = 'index.html';
            }
        });
    }

    /**
     * H·ªßy b·ªè protection (ch·ªâ admin c√≥ th·ªÉ g·ªçi)
     */
    destroy() {
        if (!this.isAdmin()) {
            console.log('‚ùå Only admin can destroy protection');
            return false;
        }

        console.log('üóëÔ∏è Destroying DevTools protection...');
        
        if (this.checkInterval) {
            clearInterval(this.checkInterval);
            this.checkInterval = null;
        }
        
        // Remove event listeners
        document.removeEventListener('keydown', this.handleKeyDown);
        document.removeEventListener('contextmenu', this.handleContextMenu);
        document.removeEventListener('selectstart', this.handleSelectStart);
        
        console.log('‚úÖ DevTools protection destroyed');
        return true;
    }
}

// =================================================================
// ADMIN MANAGEMENT CLASS
// =================================================================

class AdminDevToolsManager {
    /**
     * K√≠ch ho·∫°t DevTools cho admin
     */
    static enableDevTools() {
        const user = window.currentUser || JSON.parse(localStorage.getItem('gag_user') || '{}');
        
        if (!user || user.role !== 'admin') {
            console.log('‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ k√≠ch ho·∫°t DevTools');
            return false;
        }

        // H·ªßy b·ªè protection
        if (window.devToolsProtection) {
            const destroyed = window.devToolsProtection.destroy();
            if (destroyed) {
                window.devToolsProtection = null;
                console.log('‚úÖ DevTools ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t cho admin');
                console.log('üîß Admin c√≥ th·ªÉ s·ª≠ d·ª•ng t·∫•t c·∫£ t√≠nh nƒÉng debug');
                return true;
            }
        }

        console.log('‚ÑπÔ∏è DevTools protection kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c ƒë√£ ƒë∆∞·ª£c t·∫Øt');
        return false;
    }

    /**
     * T·∫Øt DevTools protection (kh·ªüi t·∫°o l·∫°i)
     */
    static disableDevTools() {
        const user = window.currentUser || JSON.parse(localStorage.getItem('gag_user') || '{}');
        
        if (!user || user.role !== 'admin') {
            console.log('‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ t·∫Øt DevTools protection');
            return false;
        }

        // Kh·ªüi t·∫°o l·∫°i protection
        if (!window.devToolsProtection) {
            window.devToolsProtection = new DevToolsProtection();
            console.log('üõ°Ô∏è DevTools protection ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i');
            return true;
        }

        console.log('‚ÑπÔ∏è DevTools protection ƒë√£ ƒëang ho·∫°t ƒë·ªông');
        return false;
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i protection
     */
    static getStatus() {
        const user = window.currentUser || JSON.parse(localStorage.getItem('gag_user') || '{}');
        const isAdmin = user && user.role === 'admin';
        const protectionActive = !!window.devToolsProtection;
        
        console.log('=== DEVTOOLS PROTECTION STATUS ===');
        console.log('User:', user?.name || 'Anonymous');
        console.log('Role:', user?.role || 'none');
        console.log('Is Admin:', isAdmin);
        console.log('Protection Active:', protectionActive);
        console.log('Can Use DevTools:', isAdmin);
        console.log('===============================');
        
        return {
            user,
            isAdmin,
            protectionActive,
            canUseDevTools: isAdmin
        };
    }
}

// =================================================================
// CONSOLE STYLING & MESSAGES
// =================================================================

function addConsoleStyles() {
    const user = window.currentUser || JSON.parse(localStorage.getItem('gag_user') || '{}');
    
    if (user && user.role === 'admin') {
        console.log('%cüëë ADMIN PANEL', 'background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 10px 20px; border-radius: 10px; font-size: 16px; font-weight: bold;');
        console.log('%cCh√†o m·ª´ng Admin! B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng DevTools.', 'color: #4CAF50; font-size: 14px;');
        console.log('%cS·ª≠ d·ª•ng AdminDevToolsManager.enableDevTools() ƒë·ªÉ t·∫Øt protection ho√†n to√†n.', 'color: #2196F3; font-size: 12px;');
        console.log('%cS·ª≠ d·ª•ng AdminDevToolsManager.getStatus() ƒë·ªÉ xem tr·∫°ng th√°i.', 'color: #2196F3; font-size: 12px;');
    } else {
        console.log('%c‚ö†Ô∏è C·∫¢NH B√ÅO', 'background: #e74c3c; color: white; padding: 10px; border-radius: 5px; font-weight: bold;');
        console.log('%cTrang n√†y ƒë∆∞·ª£c b·∫£o v·ªá kh·ªèi vi·ªác s·ª≠ d·ª•ng DevTools tr√°i ph√©p.', 'color: #e74c3c; font-size: 14px;');
    }
}

// =================================================================
// INITIALIZATION FUNCTION
// =================================================================

function initDevToolsProtection() {
    console.log('üîÑ Initializing DevTools Protection System...');
    
    const checkUser = () => {
        // ƒê·ª£i main.js load xong (c√≥ th·ªÉ m·∫•t 1-2 gi√¢y)
        if (window.Utils && (window.currentUser !== undefined || Date.now() - startTime > 3000)) {
            console.log('üîç User data available, proceeding with protection init...');
            console.log('üë§ Current user role:', window.currentUser?.role || 'none');
            
            try {
                // Kh·ªüi t·∫°o protection system
                window.devToolsProtection = new DevToolsProtection();
                window.AdminDevToolsManager = AdminDevToolsManager;
                
                // Style console
                addConsoleStyles();
                
                console.log('‚úÖ DevTools Protection initialized successfully');
            } catch (error) {
                console.error('‚ùå Failed to initialize DevTools Protection:', error);
            }
        } else {
            // Ch·ªù 200ms v√† th·ª≠ l·∫°i
            setTimeout(checkUser, 200);
        }
    };

    const startTime = Date.now();
    checkUser();
}

// =================================================================
// AUTO INITIALIZATION
// =================================================================

// Initialize when DOM loaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initDevToolsProtection);
} else {
    // DOM already loaded
    setTimeout(initDevToolsProtection, 100);
}

// Also init when page becomes visible
document.addEventListener('visibilitychange', () => {
    if (!document.hidden && !window.devToolsProtection) {
        console.log('üëÅÔ∏è Page visible and no protection - reinitializing...');
        setTimeout(initDevToolsProtection, 500);
    }
});

// Export to window for debugging
window.initDevToolsProtection = initDevToolsProtection;

console.log('üõ°Ô∏è DevTools Protection Script Loaded Successfully');
